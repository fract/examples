"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[843],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=s.createContext({}),i=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=i(e.components);return s.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(t),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?s.createElement(g,a(a({ref:n},p),{},{components:t})):s.createElement(g,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var i=2;i<o;i++)a[i]=t[i];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var s=t(7462),r=(t(7294),t(3905));const o={sidebar_position:5},a="Styling",l={unversionedId:"styling/index",id:"styling/index",title:"Styling",description:"Whatsup has a hybrid styling system that allows you to use familiar CSS modules or a new CSSX approach. Both systems work out of the box - you decide which one to use. You can also use both at once.",source:"@site/docs/styling/index.md",sourceDirName:"styling",slug:"/styling/",permalink:"/docs/styling/",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/styling/index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Decorators",permalink:"/docs/state-management/decorators"},next:{title:"Passing CSS-variables",permalink:"/docs/styling/passing-variables"}},c={},i=[{value:"CSS modules way",id:"css-modules-way",level:3},{value:"New CSSX way",id:"new-cssx-way",level:3},{value:"Custom CSSX components",id:"custom-cssx-components",level:3}],p={toc:i};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"styling"},"Styling"),(0,r.kt)("p",null,"Whatsup has a hybrid styling system that allows you to use familiar ",(0,r.kt)("inlineCode",{parentName:"p"},"CSS modules")," or a new ",(0,r.kt)("inlineCode",{parentName:"p"},"CSSX")," approach. Both systems work out of the box - you decide which one to use. You can also use both at once."),(0,r.kt)("p",null,"Imagine that we have such a css."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* styles.css */\n\n.badge {\n    color: white;\n}\n\n.red {\n    backgroung-color: red;\n}\n\n.green {\n    backgroung-color: green;\n}\n")),(0,r.kt)("p",null,"And we need to create such a component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface BadgeProps {\n    color: 'red' | 'green'\n    text: string\n}\n\nfunction Badge(props: BadgeProps) {\n    //....\n}\n")),(0,r.kt)("h3",{id:"css-modules-way"},"CSS modules way"),(0,r.kt)("p",null,"Here everything is as usual"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styles from './styles.css'\n\nfunction Badge(props: BadgeProps) {\n    const { color, text } = props\n\n    let cn = styles.badge\n\n    if (color === 'red') cn += ' ' + styles.red\n    if (color === 'green') cn += ' ' + styles.green\n\n    return <div className={cn}>{text}</div>\n}\n")),(0,r.kt)("h3",{id:"new-cssx-way"},"New CSSX way"),(0,r.kt)("p",null,"We import components named as html-tags from the css-file. Each such component tag has boolean css:namespaced properties associated with the names of css classes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Div } from './styles.css'\n\nfunction Badge(props: BadgeProps) {\n    const { color, text } = props\n    const isRed = color === 'red'\n    const isGreen = color === 'green'\n\n    return (\n        <Div css:badge css:red={isRed} css:green={isGreen}>\n            {text}\n        </Div>\n    )\n}\n")),(0,r.kt)("p",null,"in this example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Div css:badge />\n")),(0,r.kt)("p",null,"is equal to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<div className={styles.badge} />\n")),(0,r.kt)("h3",{id:"custom-cssx-components"},"Custom CSSX components"),(0,r.kt)("p",null,"You can convert any custom component to CSSX component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styles from './styles.css'\nimport { cssx } from 'whatsup/cssx'\n\nfunction Block(props) {\n    const { className } = props\n\n    return <div className={className} />\n}\n\nconst BlockX = cssx(Block, styles)\n\nfunction Badge(props: BadgeProps) {\n    const { color, text } = props\n    const isRed = color === 'red'\n    const isGreen = color === 'green'\n\n    return (\n        <BlockX css:badge css:red={isRed} css:green={isGreen}>\n            {text}\n        </BlockX>\n    )\n}\n")),(0,r.kt)("p",null,"To do this, you just need to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"className")," property or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"{...spread}")," operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styles from './styles.css'\n\nfunction Block(props) {\n    // any logic\n    return <div {...props} />\n}\n")),(0,r.kt)("p",null,"And then wrap it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"cssx")," function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const BlockX = cssx(Block, styles)\n")))}u.isMDXComponent=!0}}]);