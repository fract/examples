"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},s="Reactions",i={unversionedId:"state-management/reactions",id:"state-management/reactions",title:"Reactions",description:"Reactions trigger side effects when observed values change.",source:"@site/docs/state-management/reactions.md",sourceDirName:"state-management",slug:"/state-management/reactions",permalink:"/docs/state-management/reactions",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/state-management/reactions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Actions",permalink:"/docs/state-management/actions"},next:{title:"Mutators",permalink:"/docs/state-management/mutators"}},c={},l=[{value:"Autorun",id:"autorun",level:3},{value:"Reaction",id:"reaction",level:3},{value:"Disposing",id:"disposing",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reactions"},"Reactions"),(0,a.kt)("p",null,"Reactions trigger side effects when observed values change."),(0,a.kt)("h3",{id:"autorun"},"Autorun"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autorun")," takes a function and executes it every time the dependent observables change."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, autorun } from 'whatsup'\n\nconst name = observable('John')\n\nautorun(() => console.log(name()))\n//> 'John'\n\nname('Barry')\n//> 'Barry'\n")),(0,a.kt)("h3",{id:"reaction"},"Reaction"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"reaction")," takes two functions and each time the dependent observables of the first function change, it calls the second function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, reaction } from 'whatsup'\n\nconst name = observable('John')\n\nreaction(\n    () => name(),\n    (v) => console.log(v)\n)\n//> 'John'\n\nname('Barry')\n//> 'Barry'\n")),(0,a.kt)("h3",{id:"disposing"},"Disposing"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autorun")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"reaction")," return a dispose function that must be called to stop tracking and release resources"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, autorun } from 'whatsup'\n\nconst name = observable('John')\n\nconst dispose = autorun(() => console.log(name()))\n//> 'John'\n\ndispose() // stop watching\n\nname('Barry')\n//> ... no reaction\n")))}p.isMDXComponent=!0}}]);