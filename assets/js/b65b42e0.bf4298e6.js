"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[642],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),c=p(n),b=r,y=c["".concat(u,".").concat(b)]||c[b]||m[b]||o;return n?a.createElement(y,s(s({ref:t},i),{},{components:n})):a.createElement(y,s({ref:t},i))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},s="Observables",l={unversionedId:"state-management/observables",id:"state-management/observables",title:"Observables",description:"Observable",source:"@site/docs/state-management/observables.md",sourceDirName:"state-management",slug:"/state-management/observables",permalink:"/docs/state-management/observables",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/state-management/observables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"State management",permalink:"/docs/state-management/"},next:{title:"Computeds",permalink:"/docs/state-management/computeds"}},u={},p=[{value:"Observable",id:"observable",level:3},{value:"Observable Array",id:"observable-array",level:3},{value:"Observable Set",id:"observable-set",level:3},{value:"Observable Map",id:"observable-map",level:3}],i={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"observables"},"Observables"),(0,r.kt)("h3",{id:"observable"},"Observable"),(0,r.kt)("p",null,"Creates a trackable field. Works as a getter when called with no arguments and as a setter when called with arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, autorun } from 'whatsup'\n\nconst name = observable('John')\n\nautorun(() => console.log(name()))\n//> 'John'\n\nname('Barry')\n//> 'Barry'\n")),(0,r.kt)("h3",{id:"observable-array"},"Observable Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { array, autorun } from 'whatsup'\n\nconst arr = array([1, 2])\n\nautorun(() => console.log(`Joined: ${arr.join()}`))\n//> 'Joined: 1,2'\n\narr.push(3)\n//> 'Joined: 1,2,3'\n")),(0,r.kt)("h3",{id:"observable-set"},"Observable Set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { set, autorun } from 'whatsup'\n\nconst mySet = set([1, 2])\n\nautorun(() => console.log(`My set has 3: ${mySet.has(3)}`))\n//> 'My set has 3: false'\n\nmySet.add(3)\n//> 'My set has 3: true'\n\nmySet.delete(3)\n//> 'My set has 3: false'\n")),(0,r.kt)("h3",{id:"observable-map"},"Observable Map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { map, autorun } from 'whatsup'\n\nconst myMap = map([\n    [1, 'John'],\n    [2, 'Barry'],\n])\n\nautorun(() => {\n    console.log(`My map has key 3: ${myMap.has(3)}`)\n    console.log(`Value of key 3: ${myMap.get(3)}`)\n})\n//> 'My map has 3: false'\n//> 'Value of key 3: undefined'\n\nmyMap.set(3, 'Jessy')\n//> 'My map has 3: true'\n//> 'Value of key 3: Jessy'\n\nmyMap.set(3, 'Bob')\n//> 'My map has 3: true'\n//> 'Value of key 3: Bob'\n\nmyMap.delete(3)\n//> 'My map has 3: false'\n//> 'Value of key 3: undefined'\n")))}m.isMDXComponent=!0}}]);