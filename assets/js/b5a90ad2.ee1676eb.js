"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[599],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="Actions",l={unversionedId:"state-management/actions",id:"state-management/actions",title:"Actions",description:"Allows multiple updates in one operation.",source:"@site/docs/state-management/actions.md",sourceDirName:"state-management",slug:"/state-management/actions",permalink:"/docs/state-management/actions",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/state-management/actions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Computeds",permalink:"/docs/state-management/computeds"},next:{title:"Reactions",permalink:"/docs/state-management/reactions"}},s={},c=[{value:"Without action",id:"without-action",level:3},{value:"With action",id:"with-action",level:3},{value:"runInAction",id:"runinaction",level:3}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"actions"},"Actions"),(0,r.kt)("p",null,"Allows multiple updates in one operation."),(0,r.kt)("h3",{id:"without-action"},"Without action"),(0,r.kt)("p",null,"Recalculation occurs after each change in the observed value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, computed, autorun } from 'whatsup'\n\nconst firstName = observable('John')\nconst lastName = observale('Lennon')\n\nconst fullName = computed(() => `${firstName()} ${lastName()}`)\n\nconst updateName = (first: string, last: string) => {\n    firstName(first)\n    lastName(last)\n}\n\nautorun(() => console.log(fullName))\n//> 'John Lennon'\n\nupdateName('Barry', 'Miller')\n//> 'Barry Lennon' <-- recalculation after change firstName\n//> 'Barry Miller' <-- recalculation after change lastName\n")),(0,r.kt)("h3",{id:"with-action"},"With action"),(0,r.kt)("p",null,"Recalculation occurs once after all changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, computed, action, autorun } from 'whatsup'\n\nconst firstName = observable('John')\nconst lastName = observale('Lennon')\n\nconst fullName = computed(() => `${firstName()} ${lastName()}`)\n\nconst updateName = action((first: string, last: string) => {\n    firstName(first)\n    lastName(last)\n})\n\nautorun(() => console.log(fullName))\n//> 'John Lennon'\n\nupdateName('Barry', 'Miller')\n//> 'Barry Miller' <-- once recalculation after change firstName & lastName\n")),(0,r.kt)("h3",{id:"runinaction"},"runInAction"),(0,r.kt)("p",null,"runInAction creates an action and immediately executes it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { observable, computed, runInAction, autorun } from 'whatsup'\n\nconst firstName = observable('John')\nconst lastName = observale('Lennon')\n\nconst fullName = computed(() => `${firstName()} ${lastName()}`)\n\nautorun(() => console.log(fullName))\n//> 'John Lennon'\n\nrunInAction(() => {\n    firstName('Barry')\n    lastName('Miller')\n})\n//> 'Barry Miller' <-- once recalculation after change firstName & lastName\n")))}m.isMDXComponent=!0}}]);