"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[626],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||l;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var s=2;s<l;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9778:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const l={sidebar_position:2},i="Mounting callbacks",a={unversionedId:"components/mounting-callbacks",id:"components/mounting-callbacks",title:"Mounting callbacks",description:"Single element",source:"@site/docs/components/mounting-callbacks.md",sourceDirName:"components",slug:"/components/mounting-callbacks",permalink:"/docs/components/mounting-callbacks",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/components/mounting-callbacks.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Lifecycle",permalink:"/docs/components/lifecycle"},next:{title:"Valid JSX elements",permalink:"/docs/components/valid-elements"}},c={},s=[{value:"Single element",id:"single-element",level:3},{value:"Multiple elements",id:"multiple-elements",level:3}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mounting-callbacks"},"Mounting callbacks"),(0,r.kt)("h3",{id:"single-element"},"Single element"),(0,r.kt)("p",null,"You can always access DOM elements after mounting them using the ",(0,r.kt)("inlineCode",{parentName:"p"},"onMount")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onUnmount")," properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function* App() {\n    const onMount = (el) => el as HTMLDivElement\n    const onUnmount = (el) => el as HTMLDivElement\n\n    while (true) {\n        yield (\n            <div onMount={onMount} onUnmount={onUnmount}>\n                Hello world\n            </div>\n        )\n    }\n}\n")),(0,r.kt)("h3",{id:"multiple-elements"},"Multiple elements"),(0,r.kt)("p",null,"If the component returns a fragment or an array of components, then using the ",(0,r.kt)("inlineCode",{parentName:"p"},"onMount")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onUnmount")," properties you will get a list of rendered DOM elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function List() {\n    return (\n        <>\n            <div>One</div>\n            <div>Two</div>\n            <div>Thr</div>\n        </>\n    )\n}\n\nfunction* App() {\n    const onMount = (el) => el as HTMLDivElement[] // Array of <div /> elements\n    const onUnmount = (el) => el as HTMLDivElement[]\n\n    while (true) {\n        yield <List onMount={onMount} onUnmount={onUnmount} />\n    }\n}\n")))}p.isMDXComponent=!0}}]);