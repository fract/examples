"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[385],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>u});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=o.createContext({}),l=function(t){var e=o.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return o.createElement(c.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),u=r,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||a;return n?o.createElement(m,i(i({ref:e},p),{},{components:n})):o.createElement(m,i({ref:e},p))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9111:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},i="Data providing",s={unversionedId:"components/context/data-providing",id:"components/context/data-providing",title:"Data providing",description:"The context provides a way to exchange data from top to bottom (from parent to child elements) to any depth of nesting.",source:"@site/docs/components/context/data-providing.md",sourceDirName:"components/context",slug:"/components/context/data-providing",permalink:"/docs/components/context/data-providing",draft:!1,editUrl:"https://github.com/whatsup/whatsup/docs/components/context/data-providing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Context",permalink:"/docs/components/context/"},next:{title:"Event system",permalink:"/docs/components/context/event-system"}},c={},l=[{value:"Context Access",id:"context-access",level:3},{value:"Sharing with symbols",id:"sharing-with-symbols",level:3},{value:"Sharing with Context key",id:"sharing-with-context-key",level:3},{value:"Sharing with constructor",id:"sharing-with-constructor",level:3}],p={toc:l};function h(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-providing"},"Data providing"),(0,r.kt)("p",null,"The context provides a way to exchange data from top to bottom (from parent to child elements) to any depth of nesting."),(0,r.kt)("h3",{id:"context-access"},"Context Access"),(0,r.kt)("p",null,"The context can be accessed via the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," keyword or via the second argument (React-like way)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import type { Context } from 'whatsup/jsx'\n\nfunction App(this: Context) {}\n\n// or\n\nfunction App(props: {}, ctx: Context) {}\n")),(0,r.kt)("h3",{id:"sharing-with-symbols"},"Sharing with symbols"),(0,r.kt)("p",null,"To make data available to child components, you need a key and, of course, data :) This method uses symbols as the key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import type { Context } from 'whatsup/jsx'\n\nconst THEME = Symbol('Access key')\n\nfunction* Parent(this: Context) {\n    this.share(THEME, 'dark')\n\n    while (true) {\n        yield <Child />\n    }\n}\n\nfunction Child(this: Context) {\n    const theme = this.find(THEME)\n\n    return <div>Theme is {theme}</div>\n}\n")),(0,r.kt)("p",null,"We specifically made the parent component using a generator - most often we only need to share the data once in the component's initialization phase. The functional component would do this on every update."),(0,r.kt)("p",null,"It would be correct to make a child component on the generator as well, so as not to access the context on each update to get the theme value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function* Child(this: Context) {\n    const theme = this.find(THEME)\n\n    while (true) {\n        yield <div>Theme is {theme}</div>\n    }\n}\n")),(0,r.kt)("p",null,"Excellent! But it's not reactive! Let's fix this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import type { Context } from 'whatsup/jsx'\n\nconst THEME = Symbol('Access key')\n\nfunction* Parent(this: Context) {\n    const theme = observable('dark')\n    const toggleTheme = () => theme(theme() === 'dark' ? 'light' : 'dark')\n\n    this.share(THEME, theme)\n\n    while (true) {\n        yield (\n            <>\n                <Child />\n                <button onClick={toggleTheme}>Toggle theme</button>\n            </>\n        )\n    }\n}\n\nfunction* Child(this: Context) {\n    const theme = this.find(THEME)\n\n    while (true) {\n        yield <div>Theme is {theme()}</div>\n    }\n}\n")),(0,r.kt)("p",null,"And now it's reactive :)"),(0,r.kt)("h3",{id:"sharing-with-context-key"},"Sharing with Context key"),(0,r.kt)("p",null,"Context key is an alternative to a symbol key. It allows you to specify a default value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Context, createKey } from 'whatsup/jsx'\n\nconst THEME = createKey('dark')\n\nfunction* Parent(this: Context) {\n    //...\n    this.share(THEME, 'light')\n    //...\n}\n\nfunction* Child(this: Context) {\n    /*\n        If THEME key is not found in the context, \n        then the default value will be returned.\n    */\n    const theme = this.find(THEME)\n    // ...\n}\n")),(0,r.kt)("h3",{id:"sharing-with-constructor"},"Sharing with constructor"),(0,r.kt)("p",null,"We can share instances of any class and find them by constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Context } from 'whatsup/jsx'\n\nclass Store {}\n\nfunction* Parent(this: Context) {\n    const store = new Store()\n\n    this.share(store)\n\n    while (true) {\n        yield <Child />\n    }\n}\n\nfunction* Child(this: Context) {\n    const store = this.find(Store)\n\n    while (true) {\n        // ...\n    }\n}\n")))}h.isMDXComponent=!0}}]);